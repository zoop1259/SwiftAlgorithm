/*
 
 문제 설명
 두 수를 입력받아 두 수의 최대공약수와 최소공배수를 반환하는 함수, solution을 완성해 보세요. 배열의 맨 앞에 최대공약수, 그다음 최소공배수를 넣어 반환하면 됩니다. 예를 들어 두 수 3, 12의 최대공약수는 3, 최소공배수는 12이므로 solution(3, 12)는 [3, 12]를 반환해야 합니다.

 제한 사항
 두 수는 1이상 1000000이하의 자연수입니다.
 입출력 예
 n    m    return
 3    12    [3, 12]
 2    5    [1, 10]
 입출력 예 설명
 입출력 예 #1
 위의 설명과 같습니다.

 입출력 예 #2
 자연수 2와 5의 최대공약수는 1, 최소공배수는 10이므로 [1, 10]을 리턴해야 합니다.


 
 */
import Foundation


//최대공약수
func gcd(_ num: Int, _ num2: Int) -> Int {
    let mod: Int = num % num2
    
    //min은 두 수중 작은수 출력.
    return 0 == mod ? min(num, num2) : gcd(num2, mod)
}

//3 12 
 
//최소공배수 최대공약수를 구하면 쉽다.
func lcm(_ a: Int, _ b: Int) -> Int {
    return a * b / gcd(a, b)
}
 
func 최대공약수와최소공배수(_ n:Int, _ m:Int) -> [Int] {
    return [gcd(n, m), lcm(n, m)]
}

/*
min(num, num2)는 가로안에 두개의 숫자중 작은 숫자를 리턴하게 됩니다.
그리고 첫번째 매개변수와 두번째 매개변수가 딱 나누어 떨어지지 않으면 다시 함수가 호출되어 결국에는 최대 공약수가 나오게 됩니다.
lcm은 최소공배수를 찾는 문제로 간단하게 두개의 숫자를 곱하고 최대공약수로 나누면 찾을수 있습니다.
정리
최대공약수 공식
숫자1 % 숫자 2 == 0 ? 둘중최소값(숫자1, 숫자2) : 없으면 다시(숫자2, 숫자1 % 숫자2)
최소공배수 공식
(숫자1 * 숫자2) / 최대공약수


 */
